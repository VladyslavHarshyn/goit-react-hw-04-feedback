{"ast":null,"code":"var _jsxFileName = \"/Users/vladyslavharshyn/Documents/GitHub/goit-react-hw-04-feedback/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport FeedbackBtn from './components/Feedback/FeedbackBtn/FeedbackBtn';\nimport FeedbackStats from './components/Feedback/FeedbackStats/FeedbackStats';\nimport Section from 'components/Feedback/Section/Section';\nimport Notification from 'components/Feedback/Notification/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [state, setState] = useState({\n    good: 0,\n    neutral: 0,\n    bad: 0\n  });\n\n  const onLeaveFeedback = propertyName => {\n    setState(prevState => {\n      return { ...prevState,\n        [propertyName]: prevState[propertyName] + 1\n      };\n    });\n  };\n\n  const {\n    good,\n    neutral,\n    bad\n  } = state;\n  const countTotalFeedback = good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = propertyName => {\n    if (!countTotalFeedback) {\n      return 0;\n    }\n\n    const overall = state[propertyName];\n    const result = overall / countTotalFeedback * 100;\n    return Number(result);\n  };\n\n  const positivePercent = countPositiveFeedbackPercentage('good');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      title: \"Please leave feedback\",\n      children: /*#__PURE__*/_jsxDEV(FeedbackBtn, {\n        options: state,\n        onLeaveFeedback: onLeaveFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      title: \"Statistics\",\n      children: [!Boolean(total) && /*#__PURE__*/_jsxDEV(Notification, {\n        message: \"There is no feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), Boolean(total) && /*#__PURE__*/_jsxDEV(FeedbackStats, {\n        good: good,\n        neutral: neutral,\n        bad: bad,\n        total: countTotalFeedback,\n        positivePercentage: countPositiveFeedbackPercentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n//   setVote = vote => {\n//     this.setState(prevState => {\n//       return {\n//         [vote]: prevState[vote] + 1,\n//       };\n//     });\n//   };\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     return good + neutral + bad;\n//   };\n//   countPositiveFeedbackPercentage() {\n//     const { good } = this.state;\n//     const total = this.countTotalFeedback();\n//     if (total === 0) {\n//       return 0;\n//     } else {\n//       return Math.round((good / total) * 100);\n//     }\n//   }\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const total = this.countTotalFeedback();\n//     return (\n//       <>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackBtn\n//             options={Object.keys(this.state)}\n//             onLeaveFeedback={this.setVote}\n//           ></FeedbackBtn>\n//         </Section>\n//         <Section title=\"Statistics\">\n//           {!Boolean(total) && (\n//             <Notification message=\"There is no feedback\"></Notification>\n//           )}\n//           {Boolean(total) && (\n//             <FeedbackStats\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={this.countTotalFeedback()}\n//               positivePercentage={this.countPositiveFeedbackPercentage()}\n//             ></FeedbackStats>\n//           )}\n//         </Section>\n//       </>\n//     );\n//   }\n// }\n\n\n_s(App, \"sGEG3JIwuPBnMZ87ID18WLpvnTA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vladyslavharshyn/Documents/GitHub/goit-react-hw-04-feedback/src/App.jsx"],"names":["useState","FeedbackBtn","FeedbackStats","Section","Notification","App","state","setState","good","neutral","bad","onLeaveFeedback","propertyName","prevState","countTotalFeedback","countPositiveFeedbackPercentage","overall","result","Number","positivePercent","Boolean","total"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,+CAAxB;AACA,OAAOC,aAAP,MAA0B,mDAA1B;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAOC,YAAP,MAAyB,+CAAzB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC;AACjCQ,IAAAA,IAAI,EAAE,CAD2B;AAEjCC,IAAAA,OAAO,EAAE,CAFwB;AAGjCC,IAAAA,GAAG,EAAE;AAH4B,GAAD,CAAlC;;AAMA,QAAMC,eAAe,GAAGC,YAAY,IAAI;AACtCL,IAAAA,QAAQ,CAACM,SAAS,IAAI;AACpB,aAAO,EACL,GAAGA,SADE;AAEL,SAACD,YAAD,GAAgBC,SAAS,CAACD,YAAD,CAAT,GAA0B;AAFrC,OAAP;AAID,KALO,CAAR;AAMD,GAPD;;AASA,QAAM;AAAEJ,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAAyBJ,KAA/B;AACA,QAAMQ,kBAAkB,GAAGN,IAAI,GAAGC,OAAP,GAAiBC,GAA5C;;AAEA,QAAMK,+BAA+B,GAAGH,YAAY,IAAI;AACtD,QAAI,CAACE,kBAAL,EAAyB;AACvB,aAAO,CAAP;AACD;;AACD,UAAME,OAAO,GAAGV,KAAK,CAACM,YAAD,CAArB;AACA,UAAMK,MAAM,GAAID,OAAO,GAAGF,kBAAX,GAAiC,GAAhD;AACA,WAAOI,MAAM,CAACD,MAAD,CAAb;AACD,GAPD;;AAQA,QAAME,eAAe,GAAGJ,+BAA+B,CAAC,MAAD,CAAvD;AAEA,sBACE;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,uBAAf;AAAA,6BACE,QAAC,WAAD;AACE,QAAA,OAAO,EAAET,KADX;AAEE,QAAA,eAAe,EAAEK;AAFnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,YAAf;AAAA,iBACG,CAACS,OAAO,CAACC,KAAD,CAAR,iBACC,QAAC,YAAD;AAAc,QAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cAFJ,EAIGD,OAAO,CAACC,KAAD,CAAP,iBACC,QAAC,aAAD;AACE,QAAA,IAAI,EAAEb,IADR;AAEE,QAAA,OAAO,EAAEC,OAFX;AAGE,QAAA,GAAG,EAAEC,GAHP;AAIE,QAAA,KAAK,EAAEI,kBAJT;AAKE,QAAA,kBAAkB,EAAEC;AALtB;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AAyBD,CAtDD,C,CAwDA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GArHMV,G;;KAAAA,G;AAuHN,eAAeA,GAAf","sourcesContent":["import { useState } from 'react';\nimport FeedbackBtn from './components/Feedback/FeedbackBtn/FeedbackBtn';\nimport FeedbackStats from './components/Feedback/FeedbackStats/FeedbackStats';\nimport Section from 'components/Feedback/Section/Section';\nimport Notification from 'components/Feedback/Notification/Notification';\n\nconst App = () => {\n  const [state, setState] = useState({\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  });\n\n  const onLeaveFeedback = propertyName => {\n    setState(prevState => {\n      return {\n        ...prevState,\n        [propertyName]: prevState[propertyName] + 1,\n      };\n    });\n  };\n\n  const { good, neutral, bad } = state;\n  const countTotalFeedback = good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = propertyName => {\n    if (!countTotalFeedback) {\n      return 0;\n    }\n    const overall = state[propertyName];\n    const result = (overall / countTotalFeedback) * 100;\n    return Number(result);\n  };\n  const positivePercent = countPositiveFeedbackPercentage('good');\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackBtn\n          options={state}\n          onLeaveFeedback={onLeaveFeedback}\n        ></FeedbackBtn>\n      </Section>\n\n      <Section title=\"Statistics\">\n        {!Boolean(total) && (\n          <Notification message=\"There is no feedback\"></Notification>\n        )}\n        {Boolean(total) && (\n          <FeedbackStats\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback}\n            positivePercentage={countPositiveFeedbackPercentage}\n          ></FeedbackStats>\n        )}\n      </Section>\n    </>\n  );\n};\n\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   setVote = vote => {\n//     this.setState(prevState => {\n//       return {\n//         [vote]: prevState[vote] + 1,\n//       };\n//     });\n//   };\n\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     return good + neutral + bad;\n//   };\n\n//   countPositiveFeedbackPercentage() {\n//     const { good } = this.state;\n//     const total = this.countTotalFeedback();\n\n//     if (total === 0) {\n//       return 0;\n//     } else {\n//       return Math.round((good / total) * 100);\n//     }\n//   }\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const total = this.countTotalFeedback();\n\n//     return (\n//       <>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackBtn\n//             options={Object.keys(this.state)}\n//             onLeaveFeedback={this.setVote}\n//           ></FeedbackBtn>\n//         </Section>\n\n//         <Section title=\"Statistics\">\n//           {!Boolean(total) && (\n//             <Notification message=\"There is no feedback\"></Notification>\n//           )}\n//           {Boolean(total) && (\n//             <FeedbackStats\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={this.countTotalFeedback()}\n//               positivePercentage={this.countPositiveFeedbackPercentage()}\n//             ></FeedbackStats>\n//           )}\n//         </Section>\n//       </>\n//     );\n//   }\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}