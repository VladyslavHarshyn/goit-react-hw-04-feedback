{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport FeedbackBtn from './components/Feedback/FeedbackBtn/FeedbackBtn';\nimport FeedbackStats from './components/Feedback/FeedbackStats/FeedbackStats';\nimport Section from 'components/Feedback/Section/Section';\nimport Notification from 'components/Feedback/Notification/Notification';\n\nconst App = () => {\n  _s();\n\n  const [state, setState] = useState({\n    good: 0,\n    neutral: 0,\n    bad: 0\n  });\n\n  const onLeaveFeedback = propertyName => {\n    setState(prevState => {\n      return { ...prevState,\n        [propertyName]: prevState[propertyName] + 1\n      };\n    });\n  };\n\n  const {\n    good,\n    neutral,\n    bad\n  } = state;\n  const countTotalFeedback = good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = propertyName => {\n    if (!countTotalFeedback) {\n      return 0;\n    }\n  };\n}; // class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n//   setVote = vote => {\n//     this.setState(prevState => {\n//       return {\n//         [vote]: prevState[vote] + 1,\n//       };\n//     });\n//   };\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     return good + neutral + bad;\n//   };\n//   countPositiveFeedbackPercentage() {\n//     const { good } = this.state;\n//     const total = this.countTotalFeedback();\n//     if (total === 0) {\n//       return 0;\n//     } else {\n//       return Math.round((good / total) * 100);\n//     }\n//   }\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const total = this.countTotalFeedback();\n//     return (\n//       <>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackBtn\n//             options={Object.keys(this.state)}\n//             onLeaveFeedback={this.setVote}\n//           ></FeedbackBtn>\n//         </Section>\n//         <Section title=\"Statistics\">\n//           {!Boolean(total) && (\n//             <Notification message=\"There is no feedback\"></Notification>\n//           )}\n//           {Boolean(total) && (\n//             <FeedbackStats\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={this.countTotalFeedback()}\n//               positivePercentage={this.countPositiveFeedbackPercentage()}\n//             ></FeedbackStats>\n//           )}\n//         </Section>\n//       </>\n//     );\n//   }\n// }\n\n\n_s(App, \"sGEG3JIwuPBnMZ87ID18WLpvnTA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vladyslavharshyn/Documents/GitHub/goit-react-hw-04-feedback/src/App.jsx"],"names":["useState","FeedbackBtn","FeedbackStats","Section","Notification","App","state","setState","good","neutral","bad","onLeaveFeedback","propertyName","prevState","countTotalFeedback","countPositiveFeedbackPercentage"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,+CAAxB;AACA,OAAOC,aAAP,MAA0B,mDAA1B;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAOC,YAAP,MAAyB,+CAAzB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC;AACjCQ,IAAAA,IAAI,EAAE,CAD2B;AAEjCC,IAAAA,OAAO,EAAE,CAFwB;AAGjCC,IAAAA,GAAG,EAAE;AAH4B,GAAD,CAAlC;;AAMA,QAAMC,eAAe,GAAGC,YAAY,IAAI;AACtCL,IAAAA,QAAQ,CAACM,SAAS,IAAI;AACpB,aAAO,EACL,GAAGA,SADE;AACS,SAACD,YAAD,GAAgBC,SAAS,CAACD,YAAD,CAAT,GAA0B;AADnD,OAAP;AAGD,KAJO,CAAR;AAKD,GAND;;AAQA,QAAM;AAAEJ,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAAyBJ,KAA/B;AACA,QAAMQ,kBAAkB,GAAGN,IAAI,GAAGC,OAAP,GAAiBC,GAA5C;;AAEA,QAAMK,+BAA+B,GAAIH,YAAD,IAAkB;AACxD,QAAI,CAACE,kBAAL,EAAyB;AACvB,aAAO,CAAP;AACD;AAEF,GALD;AAOD,CAzBD,C,CA4BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAzFMT,G;;KAAAA,G;AA2FN,eAAeA,GAAf","sourcesContent":["import { useState } from 'react';\nimport FeedbackBtn from './components/Feedback/FeedbackBtn/FeedbackBtn';\nimport FeedbackStats from './components/Feedback/FeedbackStats/FeedbackStats';\nimport Section from 'components/Feedback/Section/Section';\nimport Notification from 'components/Feedback/Notification/Notification';\n\nconst App = () => {\n  const [state, setState] = useState({\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  });\n\n  const onLeaveFeedback = propertyName => {\n    setState(prevState => {\n      return {\n        ...prevState, [propertyName]: prevState[propertyName] + 1\n      }\n    });\n  }\n\n  const { good, neutral, bad } = state;\n  const countTotalFeedback = good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = (propertyName) => {\n    if (!countTotalFeedback) {\n      return 0;\n    }\n    \n  }\n\n}\n\n\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   setVote = vote => {\n//     this.setState(prevState => {\n//       return {\n//         [vote]: prevState[vote] + 1,\n//       };\n//     });\n//   };\n\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     return good + neutral + bad;\n//   };\n\n//   countPositiveFeedbackPercentage() {\n//     const { good } = this.state;\n//     const total = this.countTotalFeedback();\n\n//     if (total === 0) {\n//       return 0;\n//     } else {\n//       return Math.round((good / total) * 100);\n//     }\n//   }\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const total = this.countTotalFeedback();\n\n//     return (\n//       <>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackBtn\n//             options={Object.keys(this.state)}\n//             onLeaveFeedback={this.setVote}\n//           ></FeedbackBtn>\n//         </Section>\n\n//         <Section title=\"Statistics\">\n//           {!Boolean(total) && (\n//             <Notification message=\"There is no feedback\"></Notification>\n//           )}\n//           {Boolean(total) && (\n//             <FeedbackStats\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={this.countTotalFeedback()}\n//               positivePercentage={this.countPositiveFeedbackPercentage()}\n//             ></FeedbackStats>\n//           )}\n//         </Section>\n//       </>\n//     );\n//   }\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}